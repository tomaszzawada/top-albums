{"version":3,"sources":["components/Nav/Nav.js","components/Header/Header.js","components/Album/Album.js","components/Pagination/Pagination.js","components/Categories/Categories.js","components/Searchbar/Searchbar.js","containers/Albums/Albums.js","components/Home/Home.js","containers/AlbumPage/AlbumPage.js","App.js","serviceWorker.js","index.js"],"names":["Nav","className","to","Header","Album","id","title","artist","image","src","alt","Pagination","albumsPerPage","totalAlbums","paginate","pageNumbers","i","Math","ceil","push","map","number","key","onClick","Categories","state","categories","Axios","get","then","res","allCategories","data","feed","entry","album","category","attributes","label","toLowerCase","uniqueCategories","Set","setState","catch","err","console","log","htmlFor","value","this","props","onChange","handleCategory","Component","Searchbar","autoComplete","type","name","placeholder","aria-label","onKeyUp","handleSearch","Albums","albums","currentPage","query","fetchResults","filter","includes","pageNumber","e","target","showAll","indexOfLastAlbum","indexOfFirstAlbum","currentAlbums","slice","albumList","length","Home","AlbumPage","match","params","album_id","albumData","albumDetails","App","basename","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4a25c101.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-light bg-light\">\r\n            <Link to='/'><span className=\"navbar-brand mb-0 h1\">TopAlbums</span></Link>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Top 100 Albums</h1>\r\n                <p className=\"lead\">Check out our top 100 albums in the US.</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Album.scss';\r\n\r\nconst Album = ({id, title, artist, image}) => {\r\n    return (\r\n         <div className=\"col-lg-3 col-md-4 col-sm-6\">\r\n            <Link to={'/' + id}>\r\n                <div className=\"album card my-3 justify-content-between\">\r\n                    <img src={image} className=\"card-img-top\" alt=\"\"/>\r\n                    <div className=\"text-center pb-3\">\r\n                        <h5 className=\"card-title\">{title}</h5>\r\n                        <p className=\"card-text\">{artist}</p>\r\n                    </div>\r\n                </div>     \r\n            </Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Album;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Pagination = ({albumsPerPage, totalAlbums, paginate}) => {\r\n    const pageNumbers = [];\r\n\r\n    for(let i = 1; i <= Math.ceil(totalAlbums / albumsPerPage) ; i++){\r\n        pageNumbers.push(i);\r\n    }\r\n\r\n    return (\r\n        <div className=\"row justify-content-center\">\r\n            <nav>\r\n                <ul className=\"pagination flex-wrap\">\r\n                    {pageNumbers.map(number => (\r\n                        <li key={number} className=\"page-item\">\r\n                            <Link to='/' onClick={() => paginate(number)} className=\"page-link\">\r\n                                {number}\r\n                            </Link>\r\n                        </li>\r\n                    ))}\r\n                </ul>  \r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pagination;\r\n","import React, {Component} from 'react';\r\nimport Axios from 'axios';\r\n\r\nclass Categories extends Component {\r\n    state = {\r\n        categories: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        Axios.get('https://itunes.apple.com/us/rss/topalbums/limit=100/json')\r\n            .then((res) => {\r\n                const allCategories = res.data.feed.entry.map((album) => {\r\n                    return album.category.attributes.label.toLowerCase();\r\n                });\r\n                const uniqueCategories = [...new Set(allCategories)]\r\n                this.setState({\r\n                    categories: uniqueCategories\r\n                });\r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"input-group\">\r\n                <div className=\"input-group-prepend\">\r\n                    <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">Categories</label>\r\n                </div>\r\n                <select value={this.props.category} onChange={this.props.handleCategory} className=\"custom-select\" id=\"inputGroupSelect01\">\r\n                    <option value=\"All\">All</option>\r\n                    {this.state.categories.map(category => (\r\n                        <option key={category} value={category}>{category}</option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Categories;","import React from 'react';\r\nimport './Searchbar.scss';\r\n\r\nconst Searchbar = (props) => {\r\n    return (\r\n        <form className=\"form-inline\" autoComplete=\"off\">\r\n            <input className=\"form-control mr-sm-2\" type=\"search\"\r\n            name=\"search\" placeholder=\"Search\" aria-label=\"Search\" onKeyUp={props.handleSearch} />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Searchbar;","import React, { Component } from 'react';\r\nimport Axios from 'axios';\r\nimport Album from '../../components/Album/Album';\r\nimport Pagination from '../../components/Pagination/Pagination';\r\nimport Categories from '../../components/Categories/Categories';\r\nimport Searchbar from '../../components/Searchbar/Searchbar';\r\nimport './Albums.scss';\r\n\r\n\r\nclass Albums extends Component {\r\n    state = {\r\n        albums: [],\r\n        currentPage: 1,\r\n        albumsPerPage: 8,\r\n        category: \"all\",\r\n        query: \"\"\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchResults();\r\n    }\r\n\r\n    fetchResults = () => {\r\n        if(this.state.query === \"\" && this.state.category === \"all\") {\r\n            Axios.get('https://itunes.apple.com/us/rss/topalbums/limit=100/json')\r\n            .then((res) => {\r\n                this.setState({\r\n                    albums: res.data.feed.entry,\r\n                    currentPage: 1\r\n                });\r\n            })\r\n            .catch(err => console.log(err));\r\n        } else if(this.state.query !== \"\" && this.state.category === \"all\"){\r\n            Axios.get('https://itunes.apple.com/us/rss/topalbums/limit=100/json')\r\n            .then((res) => {\r\n                const albums = res.data.feed.entry.filter((album) => {\r\n                    return album.title.label.toLowerCase().includes(this.state.query)\r\n                });\r\n                this.setState({\r\n                    albums: albums,\r\n                    currentPage: 1\r\n                });\r\n            })\r\n        } else {\r\n            Axios.get('https://itunes.apple.com/us/rss/topalbums/limit=100/json')\r\n            .then((res) => {\r\n                const albums = res.data.feed.entry.filter((album) => {\r\n                    return album.title.label.toLowerCase().includes(this.state.query) && album.category.attributes.label.toLowerCase() === this.state.category\r\n                });\r\n                this.setState({\r\n                    albums: albums,\r\n                    currentPage: 1\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    paginate = (pageNumber) => {\r\n        this.setState({\r\n            currentPage: pageNumber\r\n        });\r\n    }\r\n\r\n    handleCategory = (e) => {\r\n        const category = e.target.value.toLowerCase();\r\n        this.setState({\r\n            category: category\r\n        }, () => this.fetchResults());\r\n    }\r\n\r\n    handleSearch = (e) => {\r\n        // e.preventDefault();\r\n        const query = e.target.value.toLowerCase();\r\n        // e.target.reset();\r\n        this.setState({\r\n            query: query\r\n        }, () => this.fetchResults());\r\n    }\r\n\r\n    showAll = () => {\r\n        this.setState({\r\n            category: \"all\",\r\n            query: \"\"\r\n        },() => {this.fetchResults()});\r\n    }\r\n\r\n    render() {\r\n        const { albums, currentPage, albumsPerPage, category } = this.state;\r\n        const indexOfLastAlbum = currentPage * albumsPerPage;\r\n        const indexOfFirstAlbum = indexOfLastAlbum - albumsPerPage;\r\n        const currentAlbums = albums.slice(indexOfFirstAlbum, indexOfLastAlbum);\r\n\r\n        const albumList = currentAlbums.length ? (\r\n            currentAlbums.map(album => {\r\n                return <Album\r\n                    key={album.id.attributes[\"im:id\"]}\r\n                    id={album.id.attributes[\"im:id\"]}\r\n                    title={album[\"im:name\"].label}\r\n                    artist={album[\"im:artist\"].label}\r\n                    image={album[\"im:image\"][2].label}\r\n                />\r\n            })\r\n        ) : (\r\n            <div>\r\n                <div className=\"no-albums center\">No albums found</div>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <section className=\"albums\">\r\n                <div className=\"container my-5\">\r\n                    <div className=\"row my-3\">\r\n                        <div className=\"col-md-2 my-1\">\r\n                            <button onClick={this.showAll} className=\"btn btn-outline-dark float-right\">Reset filters</button>\r\n                        </div>\r\n                        <div className=\"col-md-5 my-1\">\r\n                            <Categories albums={albums} category={category} handleCategory={this.handleCategory} />\r\n                        </div>\r\n                        <div className=\"col-md-5 my-1\">\r\n                            <Searchbar handleSearch={this.handleSearch} />\r\n                        </div>\r\n                    </div>\r\n                    <Pagination albumsPerPage={albumsPerPage} totalAlbums={albums.length} paginate={this.paginate} />\r\n                    <div className=\"row\">\r\n                        { albumList }\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Albums;\r\n","import React from 'react';\r\nimport Header from '../Header/Header';\r\nimport Albums from '../../containers/Albums/Albums';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n        <Header />\r\n        <Albums />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home;\r\n","import React, {Component} from 'react';\r\nimport Axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport './AlbumPage.scss';\r\n\r\nclass AlbumPage extends Component {\r\n    state = {\r\n        album: []\r\n    }\r\n\r\n    componentDidMount(){        \r\n        let id = this.props.match.params.album_id;\r\n        Axios.get('https://itunes.apple.com/us/rss/topalbums/limit=100/json')\r\n            .then((res) => {\r\n                const albumData = res.data.feed.entry.filter((album) => {\r\n                    return album.id.attributes[\"im:id\"] === id\r\n                });\r\n                this.setState({\r\n                    album: albumData\r\n                });\r\n                \r\n            })\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    render() {\r\n        const { album } = this.state;\r\n        const albumDetails = album.length ? ( \r\n                <div className=\"card my-3\">\r\n                    <img src={album[0][\"im:image\"][2].label} className=\"card-img-top\" alt=\"\"/>\r\n                    <h5 className=\"card-title\">{album[0][\"im:name\"].label}</h5>\r\n                    <p className=\"card-text\">{album[0][\"im:artist\"].label}</p>\r\n                </div>\r\n        ) : (\r\n            <div> No albums found </div>\r\n        );\r\n        return (\r\n            <div className=\"container-fluid album-page\">\r\n                <h2 className=\"text-center py-5\">Album Details</h2>                \r\n                    { albumDetails }\r\n                <Link to='/'>\r\n                    <button className=\"btn btn-outline-dark\">go back</button>\r\n                </Link>\r\n            </div>\r\n        )\r\n    } \r\n}\r\n\r\nexport default AlbumPage;\r\n","import React from 'react';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport Nav from './components/Nav/Nav';\nimport Home from './components/Home/Home';\nimport AlbumPage from './containers/AlbumPage/AlbumPage';\n\nfunction App() {\n  return (\n    <HashRouter basename='/'>\n      <div className=\"App\">\n        <Nav />\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route path='/:album_id' component={AlbumPage} />\n        </Switch>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}